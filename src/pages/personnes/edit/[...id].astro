---
import { Debug } from "astro:components";
import Layout from "../../../layouts/Layout.astro";
import {
  PersonnesNationaliteOptions,
  PersonnesProfessionOptions,
  type PersonnesResponse,
} from "../../../pocketbase-typegen";

import GithubSlugger from "github-slugger";
import type { ClientResponseError } from "pocketbase";

const slugger = new GithubSlugger();

export const prerender = false;

const id = Astro.params.id;
let message;
const pb = Astro.locals.pb;

let personne;
try {
  personne = id
  ? await pb.collection("personnes").getOne(id)
  : ({} as PersonnesResponse);
} catch (error) {
  console.error("Erreur lors de la récupération de la personne", error);
  message = (error as ClientResponseError).message;
  personne = {} as PersonnesResponse;
}

if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  try {
  const personne = await (id
    ? pb.collection("personnes").update(id, data)
    : pb.collection("personnes").create(data));
  return Astro.redirect(
    `/personnes/${personne.id}-${encodeURIComponent(personne.nom)}`
  );
  } catch (error) {
    console.error("erreur à la maj de la personne ou de la création", error);
    message = (error as ClientResponseError).message;
  }
}

function formatDate(date: string) {
  return date ? new Date(date).toISOString().split("T")[0] : "";
}
---

<Layout pageTitle="Edit personne">
  <Debug {personne} />
  <h1>Edit personne</h1>

  <form class="*:contents grid grid-cols-2" method="post">
    <input type="hidden" name="id" value={personne.id} />
    <label>
      Nationalite
      <select name="Nationalite">
        {
          Object.entries(PersonnesNationaliteOptions).map(([key, value]) => (
            <option selected={value === personne.Nationalite} value={value}>
              {key}
            </option>
          ))
        }
      </select>
    </label>

    <label
      >Date de deces
      <input
        type="date"
        name="dateDeces"
        value={formatDate(personne.dateDeces)}
      />
    </label>

    <label
      >Date de naissance
      <input
        type="date"
        name="dateNaissance"
        value={formatDate(personne.dateNaissance)}
      />
    </label>

    <label
      >Lieu de naissance
      <input type="text" name="lieuNaissance" value={personne.lieuNaissance} />
    </label>

    <label
      >nom
      <input type="text" name="nom" value={personne.nom} />
    </label>

    <fieldset class="block! col-span-2">
      <legend>Profession</legend>
      {
        Object.entries(PersonnesProfessionOptions).map(([key, value]) => (
          <label>
            {key}
            <input
              type="checkbox"
              name="profession"
              checked={personne.profession?.includes(value)}
              value={value}
            />
          </label>
        ))
      }
    </fieldset>

    <button>Envoyer</button>
  </form>
</Layout>
